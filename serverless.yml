service: ${env:APP_NAME}
frameworkVersion: '3'

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-log-retention
  - serverless-dotenv-plugin

package:
  individually: true

useDotenv: true
configValidationMode: error

provider:
  name: aws
  architecture: arm64
  runtime: nodejs18.x
  memorySize: 128
  timeout: 3
  stackName: ${self:service}-${self:provider.stage}
  apiName: ${self:provider.stackName}
  stage: ${opt:stage, 'local'}
  profile: ${env:AWS_ACCOUNT_PROFILE}
  region: ${opt:region, env:AWS_ACCOUNT_REGION}
  apiGateway:
    shouldStartNameWithService: true
    minimumCompressionSize: 100
  httpApi:
    cors: true
    disableDefaultEndpoint: false # FIXME: To set to true before deploying to production
  stackTags:
    SITE: ${self:service}
    PRODUCT: ${self:service}
    STAGE: ${self:provider.stage}
    datadog: monitored
    service: ${env:APP_NAME}
    env: ${self:provider.stage}
  #
  # Uncomment to deploy app within an existing VPC
  #
  # vpc:
  #   securityGroupIds:
  #     - ${env:AWS_VPC_SECURITY_GROUP_ID}
  #   subnetIds:
  #     - ${env:AWS_VPC_SUBNET_1_ID}
  # - ${env:AWS_VPC_SUBNET_2_ID}
  # - ${env:AWS_VPC_SUBNET_3_ID}
  # - ${env:AWS_VPC_SUBNET_4_ID}
  #
  # Add additional permissions for your app here
  #
  iamRoleStatements:
    - Effect: 'Allow' # Required for access to dynamodb
      Action:
        - 'dynamodb:Query'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.stackName}-*'
    - Effect: 'Allow' # Required for access to SQS
      Action:
        - 'sqs:SendMessage'
        - 'sqs:ReceiveMessage'
        - 'sqs:DeleteMessage'
      Resource: 'arn:aws:sqs:${self:provider.region}:*:*'
    - Effect: 'Allow' # Required for S3
      Action:
        - 's3:GetObject'
        - 's3:PutObject'
      Resource: 'arn:aws:s3:::${env:LESGO_AWS_S3_BUCKET}/*'

custom:
  path:
    app: src
    functions: config/functions
    resources: config/resources
  serverless-offline:
    port: 8888
    ignoreJWTSignature: true
  logRetentionInDays: 7
  contentEncoding:
    contentCompression: 100
  dotenv:
    basePath: config/environments/

#
# Add functions here
#
functions:
  - ${file(${self:custom.path.functions}/utils.yml)}
  - ${file(${self:custom.path.functions}/sample-dynamodb.yml)}
  # - ${file(${self:custom.path.functions}/sample-memcache-elasticache.yml)}
  # - ${file(${self:custom.path.functions}/sample-opensearch.yml)}
  - ${file(${self:custom.path.functions}/sample-s3.yml)}
  - ${file(${self:custom.path.functions}/sample-sqs.yml)}
  - ${file(${self:custom.path.functions}/sample-jwt.yml)}
  - ${file(${self:custom.path.functions}/sample-utils.yml)}
#
# Add resources here
#
resources:
  - ${file(${self:custom.path.resources}/sample-dynamodb.yml)}
  - ${file(${self:custom.path.resources}/sample-sqs.yml)}
